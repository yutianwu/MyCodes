#include <iostream>
#include <vector>
#include <unordered_set>
using namespace std;

class Solution {
public:
    bool wordBreak(string s, unordered_set<string> &dict) {
        int len = s.size();
        vector<bool> f(len + 1, false);
        f[0] = true; //空字符串设置为true
        for (int i = 1; i <= len; i++) {
            for (int j = 0; j < i; j++) {
                if (f[j] && isInSet(s.substr(j, i - j))) {
                    f[i] = true;
                    break;
                }
            }
        }   
        return f[len];
    }

    bool wordBreakMy(string s, unordered_set<string> &dict) {
        int len = (int) s.size();
        vector<bool> row(len, false);
        vector<vector<bool>> dp(len, row);

        for (int i = 0; i < len; i++) {
            string tmp = s.substr(i, 1);
            if (isInSet(tmp, dict)) {
                dp[i][i] = true;
            }
        }
        
        for (int l = 2; l <= len; l++) {
            for (int i = 0; i < len - l + 1; i++) {
                int j = i + l - 1;
                bool flag = isInSet(s.substr(i, l), dict);
                for (int k = i; k < j && !flag; k++) {
                    flag |= (dp[i][k] && dp[k + 1][j]);
                }
                dp[i][j] = flag;
            }
        }
        
        return dp[0][len - 1];
    }
    
    bool isInSet(const string &str, const unordered_set<string> &dict) {
        unordered_set<string>::const_iterator got = dict.find(str);
        if (got == dict.end()) {
            return false;
        } else {
            return true;
        }
    }
};

int main(int argc, const char * argv[]) {
    Solution sol;
    unordered_set<string> us = {"leet", "code"};
    unordered_set<string>::const_iterator got = us.find("leet");
    if (got == us.end()) {
        cout<<"not find\n";
    } else {
        cout<<"got it\n";
    }
    cout<<sol.wordBreak("leetcode", us);
    return 0;
}